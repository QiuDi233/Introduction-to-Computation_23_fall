# 描述
# 数学中有一个有趣的现象，给一个4位数，按照一个简单的规则，总能得到2178或0。

# 这个规则是：将数字颠倒并与原数字相减，得到一个差（要求用大的减小的，或者说取绝对值）。

# 例如：输入1960，运算过程如下：
# 1269  第1次运算，得到1269， 因为 1960-0691 = 1269
# 8352  第2次运算，得到8352，因为 9621-1269 = 8352
# 5814   第3次运算，依此类推
# 1629
# 7632
# 5265
# 360  第7次运算，得到360， 因为 5625-5265=360
# 297  第8次运算，得到360，因为 360-063 = 297
# 495
# 99
# 0  第11次运算，得到0，结束。

# 又例如：输入 9801，共运算3次，分别得到8712，6534，2178。得到2178也结束。

# 编写程序，输入一个4位数，输出得到2178或0的过程共运算了几次。

# 输入
# 一个4位正整数
# 输出
# 一个大于等于0的整数，它是得到2178或0的过程的运算次数

# 样例输入
# 样例1：1960
# 样例2：8888
# 样例3：9801
# 样例输出
# 样例输出1：11
# 样例输出2：1
# 样例输出3：3
# 提示
# 颠倒一个数过程，可以使用字符串进行颠倒。

num=input()
n=0
while True:
    num=str(num)
    reversed_num=num[::-1]
    num=abs(int(num)-int(reversed_num))
    n+=1
    if num==0 or num==2178:
        break
print(n)